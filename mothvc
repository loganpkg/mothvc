#! /bin/sh

#
# Copyright (c) 2024 Logan Ryan McLintock
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#


# mothvc: Moth Version Control.

set -x
set -e
set -u


# Configuration
vc_dir=.git
global_config="$HOME/$vc_dir"config
head_path="$vc_dir"/HEAD
hash_prgm=sha1sum
delim=':'
nl='
'
null=$(printf a | tr a '\0')

# Command substitution is used to remove the trailing \n
hash_text_len=$(h=$(printf '' | "$hash_prgm" | cut -d ' ' -f 1); \
    printf %s "$h" | wc -c)


hash_to_path() {
    local hash
    ############
    local hash_start
    local hash_end
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: hash_to_path hash\n' "$0" 1>&2
        return 1
    fi
    hash="$1"
    ############
    hash_start=$(printf %s "$hash" | cut -c 1-2)
    hash_end=$(printf %s "$hash" | cut -c 3-"$hash_text_len")
    printf %s "$vc_dir/objects/$hash_start/$hash_end"
}


get_hash() {
    local fn
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: get_hash fn\n' "$0" 1>&2
        return 1
    fi
    fn="$1"
    ############

    "$hash_prgm" "$fn" | cut -d ' ' -f 1
}

var_add_header() {
    local var
    local type
    ############
    local size
    local tmp_obj
    ############
    if [ "$#" -ne 2 ]
    then
        printf '%s: var_add_header var blob|tree|commit\n' "$0" 1>&2
        return 1
    fi
    var="$1"
    type="$2"
    ############
    size=$(printf %s "$var" | wc -c)
    tmp_obj=$(mktemp)
    printf '%s %s\0' "$type" "$size" > "$tmp_obj"
    printf %s "$var" >> "$tmp_obj"
    printf '%s\n' "$tmp_obj"
}


file_add_header() {
    local path
    local type
    ############
    local size
    local tmp_obj
    ############
    if [ "$#" -ne 2 ]
    then
        printf '%s: file_add_header path blob|tree|commit\n' "$0" 1>&2
        return 1
    fi
    path="$1"
    type="$2"
    ############
    size=$(stat -c %s "$path")
    tmp_obj=$(mktemp)
    printf '%s %s\0' "$type" "$size" > "$tmp_obj"
    cat "$path" >> "$tmp_obj"
    printf '%s\n' "$tmp_obj"
}


hash_obj() {
    local path
    local mode
    ############
    local hash
    local store_path
    local store_dir
    ############
    if [ "$#" -ne 2 ]
    then
        printf '%s: hash_obj path store|print\n' "$0" 1>&2
        return 1
    fi
    path="$1"
    mode="$2"
    ############

    hash=$(get_hash "$path")

    if [ "$mode" = store ]
    then
        store_path=$(hash_to_path "$hash")
        if [ ! -e "$store_path" ]
        then
            store_dir=$(dirname "$store_path")
            mkdir -p "$store_dir"
            openssl zlib -in "$path" -out "$store_path"
        fi
        printf '%s\n' "$hash"
    elif [ "$mode" = print ]
    then
        printf '%s\n' "$hash"
    else
        rm "$path"
        return 1
    fi

    return 0
}


hash_var() {
    local var
    local type
    local mode
    ############
    local tmp_obj
    ############
    if [ "$#" -ne 3 ]
    then
        printf '%s: hash_var var blob|tree|commit store|print\n' "$0" 1>&2
        return 1
    fi
    var="$1"
    type="$2"
    mode="$3"
    ############

    tmp_obj=$(var_add_header "$var" "$type")

    hash_obj "$tmp_obj" "$mode"

    rm "$tmp_obj"
}


hash_file() {
    local path
    local type
    local mode
    ############
    local tmp_obj
    ############
    if [ "$#" -ne 3 ]
    then
        printf '%s: hash_file path blob|tree|commit store|print\n' "$0" 1>&2
        return 1
    fi
    path="$1"
    type="$2"
    mode="$3"
    ############

    tmp_obj=$(file_add_header "$path" "$type")

    hash_obj "$tmp_obj" "$mode"

    rm "$tmp_obj"
}


branch_to_commit() {
    # OK if branch is already a commit hash
    local branch_or_commit
    ############
    local path
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: branch_to_commit branch|commit\n' "$0" 1>&2
        return 1
    fi
    branch_or_commit="$1"
    ############
    path="$vc_dir/refs/heads/$branch_or_commit"
    if [ -s "$path" ]
    then
        cat "$path"
    else
        printf '%s\n' "$branch_or_commit"
    fi
}


get_current_checkout() {
    local v1
    local v2
    local ref
    local commit_hash
    ############
    # No args
    ############

    IFS="$delim" read -r v1 v2 < "$head_path"

    if [ "$v1" = ref ]
    then
        ref=$(printf %s "$v2" | sed -E 's/^ +//')
        if [ -e "$vc_dir/$ref" ]
        then
            commit_hash=$(cat "$vc_dir/$ref")
        else
            return 1
        fi
    else
        commit_hash="$v1"
    fi

    printf '%s\n' "$commit_hash"
    return 0
}


object_type() {
    local hash
    ############
    local path
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: object_type hash\n' "$0" 1>&2
        return 1
    fi
    hash="$1"
    ############

    path=$(hash_to_path "$hash")
    openssl zlib -d -in "$path" | tr '\0' '\n' | head -n 1 \
        | sed -E 's/^([a-z]+) .*/\1/'
}


object_data() {
    local hash
    ############
    local path
    local header_size
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: object_data hash\n' "$0" 1>&2
        return 1
    fi
    hash="$1"
    ############

    path=$(hash_to_path "$hash")
    header_size=$(openssl zlib -d -in "$path" | tr '\0' '\n' \
        | head -n 1 | wc -c)

    openssl zlib -d -in "$path" | dd bs=1 skip="$header_size"
}


walk_tree() {
    local base_dir
    local tree_hash
    local operation
    ############
    local tree_path
    local tree_v
    local line
    local perm
    local fn
    local hash
    local path
    local type
    local f_hash
    ############
    if [ "$#" -ne 3 ]
    then
        printf '%s: walk_tree base_dir tree_hash check|delete|copy\n' "$0" 1>&2
        return 1
    fi
    base_dir="$1"
    tree_hash="$2"
    operation="$3"
    ############

    tree_path=$(hash_to_path "$tree_hash")
    tree_v=$(openssl zlib -d -in "$tree_path" | tree_to_text | tail -n +2)

    IFS="$nl"
    for line in $tree_v
    do
        perm=$(printf %s "$line" | cut -d "$delim" -f 1)
        fn=$(printf %s "$line" | cut -d "$delim" -f 2)
        hash=$(printf %s "$line" | cut -d "$delim" -f 3)

        path="$base_dir/$fn"
        type=$(object_type "$hash")
        if [ "$type" = tree ]
        then
            if [ "$operation" = copy ]
            then
                mkdir -p "$path"
            fi
            walk_tree "$path" "$hash" "$operation"
            if [ "$operation" = delete ]
            then
                rmdir "$path"
            fi
        else
            if [ "$operation" = check ]
            then
                f_hash=$(hash_file "$path" blob print)
                if [ "$f_hash" != "$hash" ]
                then
                    printf 'Modified file: %s\n' "$path"
                    return 1
                fi
            elif [ "$operation" = delete ]
            then
                rm "$path"
            elif [ "$operation" = copy ]
            then
                object_data "$hash" > "$path"
            fi
        fi
    done

    return 0
}


walk_dir() {
    local dir
    ############
    local list
    local fn
    local hash
    local tree
    local tree_sorted
    local line
    local perm
    local orig_fn
    local tree_binary
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: walk_dir dir\n' "$0" 1>&2
        return 1
    fi
    dir="$1"
    ############

    list=$(find "$dir" -mindepth 1 -maxdepth 1 ! -path '*/'"$vc_dir" \
        -exec basename '{}' \; | sed -E 's_^\./__')

    # Create tree in text format to make sorting easier,
    # then convert to binary format.

    tree=''
    IFS="$nl"
    for fn in $list
    do
        path="$dir/$fn"
        if [ -d "$path" ]
        then
             hash=$(walk_dir "$path")
             # Add trailing forward slash for sort
             tree="$tree"40000:"$fn"/:
        else
             # File
             hash=$(hash_file "$path" blob store)
             tree="$tree"100644:"$fn":
        fi
        tree="$tree$hash$nl"
    done

    LC_ALL=C tree_sorted=$(printf %s "$tree" | sort -t "$delim" -k 2,2)

    # Convert to binary format
    tree_binary=''
    IFS="$nl"
    for line in $tree_sorted
    do
        perm=$(print %s "$line" | cut -d "$delim" -f 1)
        fn=$(print %s "$line" | cut -d "$delim" -f 2)
        hash=$(print %s "$line" | cut -d "$delim" -f 3)

        orig_fn=$(printf %s "$fn" | sed -E 's@/$@@')
        tree_binary="$tree_binary$perm $orig_fn$null"
        tree_binary="$tree_binary"$(printf %s "$hash" | xxd -r -p)
    done

    hash=$(hash_var "$tree_binary" tree store)
    printf '%s\n' "$hash"

    return 0
}


commit_to_tree() {
    local commit_hash
    ############
    local commit_path
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: commit_to_tree commit_hash\n' "$0" 1>&2
        return 1
    fi
    commit_hash="$1"
    ############

    commit_path=$(hash_to_path "$commit_hash")
    openssl zlib -d -in "$commit_path" | tr '\0' '\n' | grep -E 'tree ' \
        | sed -E 's/^tree (.+)$/\1/'
}


get_name() {
    ############
    # No args
    ############
    grep -E -o 'name = .+$' "$global_config" | sed -E 's/name = //'
}


get_email() {
    ############
    # No args
    ############
    grep -E -o 'email = .+$' "$global_config" | sed -E 's/email = //'
}


commit() {
    local message
    local other_parent_hash
    ############
    local tmp_commit_file
    local bad_ch_count
    ############
    if [ "$#" -ne 2 ]
    then
        printf '%s: commit message other_parent_hash\n' "$0" 1>&2
        return 1
    fi
    message="$1"
    other_parent_hash="$2"
    ############

    tmp_commit_file=$(mktemp)

    bad_ch_count=$(find . -type f ! -path '*/.git/*' -print0 \
        | tr "$delim" '\n' | wc -l)
    if [ "$bad_ch_count" -ne 0 ]
    then
        printf '%s: ERROR: File path contains a delimiter or newline char\n' \
            "$0" 1>&2
        return 1
    fi

    tree_hash=$(walk_dir "$wd")

    author=$(get_name)
    email=$(get_email)
    parent=$(get_current_checkout)
    time=$(date +%s)
    time_zone=$(date +%z)

    printf 'tree %s\n' "$tree_hash" > "$tmp_commit_file"

    if [ -n "$parent" ]
    then
        printf 'parent %s\n' "$parent" >> "$tmp_commit_file"
    fi

    if [ "$other_parent_hash" != NULL ]
    then
        printf 'parent %s\n' "$other_parent_hash" >> "$tmp_commit_file"
    fi

    for role in author committer
    do
        printf '%s %s <%s> %s %s\n' "$role" "$author" "$email" "$time" \
            "$time_zone" >> "$tmp_commit_file"
    done

    printf '\n%s\n' "$message" >> "$tmp_commit_file"

    hash=$(hash_file "$tmp_commit_file" commit store)

    target="$head_path"

    IFS="$delim" read -r v1 v2 < "$target"

    if [ "$v1" = ref ]
    then
        ref=$(printf %s "$v2" | sed -E 's/^ +//')
        target="$vc_dir/$ref"
    fi

    printf '%s\n' "$hash" > "$target"~
    mv "$target"~ "$target"

    rm "$tmp_commit_file"
}


list_ancestors() {
    local commit_hash
    local commit_path
    local p
    ############
    local commit_path
    ############
    if [ "$#" -ne 1 ]
    then
        printf '%s: list_ancestors commit_hash\n' "$0" 1>&2
        return 1
    fi
    commit_hash="$1"
    ############

    commit_path=$(hash_to_path "$commit_hash")
    parents=$(openssl zlib -d -in "$commit_path" | tr '\0' '\n' \
        | grep -E 'parent ' | sed -E 's/^parent (.+)$/\1/')

    for p in $parents
    do
        printf '%s\n' "$p"
        list_ancestors "$p"
    done

    return 0
}


usage='Usage:
    mothvc init
    mothvc checkout branch|hash
    mothvc commit message
    mothvc merge ours|theirs branch|commit
    mothvc branch [new_branch]
'

wd=$(pwd)


if [ ! -d "$vc_dir" ]
then
    printf '%s: ERROR: Not in the base directory of a mothvc repository\n' \
        "$0" 1>&2

    exit 1
fi


############
if [ "$#" -lt 1 ]
then
    printf %s "$usage" 1>&2
    exit 1
fi
option="$1"
############

if [ "$option" = init ]
then
    mkdir -p "$vc_dir"
    printf 'ref: refs/heads/master\n' > "$head_path"
    mkdir -p "$vc_dir"/refs/heads

elif [ "$option" = checkout ]
then
    ############
    if [ "$#" -ne 2 ]
    then
        printf 'Usage: %s checkout branch|hash\n' "$0" 1>&2
        exit 1
    fi
    branch_or_commit="$2"
    ############

    target_hash=$(branch_to_commit "$branch_or_commit")
    target_tree_hash=$(commit_to_tree "$target_hash")

    commit_hash=$(get_current_checkout)
    tree_hash=$(commit_to_tree "$commit_hash")

    walk_tree "$wd" "$tree_hash" check
    walk_tree "$wd" "$tree_hash" delete

    walk_tree "$wd" "$target_tree_hash" copy

    if [ "$branch_or_commit" = "$target_hash" ]
    then
        printf '%s\n' "$target_hash" > "$head_path"~
        mv "$head_path"~ "$head_path"
    else
        printf 'ref: refs/heads/%s\n' "$branch_or_commit" > "$head_path"
    fi

elif [ "$option" = commit ]
then
    ############
    if [ "$#" -ne 2 ]
    then
        printf 'Usage: %s commit message\n' "$0" 1>&2
        exit 1
    fi
    message="$2"
    ############

    commit "$message" NULL

elif [ "$option" = merge ]
then
    ############
    if [ "$#" -ne 3 ]
    then
        printf 'Usage: %s merge ours|theirs branch|commit\n' "$0" 1>&2
        exit 1
    fi
    merge_option="$2"
    branch_or_commit="$3"
    ############

    commit_hash=$(get_current_checkout)
    tree_hash=$(commit_to_tree "$commit_hash")

    # Check for modifications
    walk_tree "$wd" "$tree_hash" check

    other_parent_hash=$(branch_to_commit "$branch_or_commit")
    other_parent_tree_hash=$(commit_to_tree "$other_parent_hash")

    if [ "$merge_option" = theirs ]
    then
        walk_tree "$wd" "$other_parent_tree_hash" copy
    elif [ "$merge_option" = ours ]
    then
        walk_tree "$wd" "$other_parent_tree_hash" copy
        walk_tree "$wd" "$tree_hash" copy
    else
        printf 'Invalid merge option\n' 1>&2
        exit 1
    fi

    commit Merge "$other_parent_hash"

elif [ "$option" = branch ]
then
    ############
    if [ "$#" -ne 1 ] && [ "$#" -ne 2 ]
    then
        printf 'Usage: %s branch [new_branch]\n' "$0" 1>&2
        exit 1
    fi
    if [ "$#" -eq 2 ]
    then
        new_branch="$2"
    else
        new_branch=''
    fi
    ############

    if [ -z "$new_branch" ]
    then
        find "$vc_dir"/refs/heads/ -type f -exec basename '{}' \;
    fi

elif [ "$option" = test ]
then
    commit_hash=$(get_current_checkout)
    list_ancestors "$commit_hash"
fi
